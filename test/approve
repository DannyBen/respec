#!/usr/bin/env bash
# Run this from the root directory

# Setup
cd ./test || exit
source approvals.bash
PATH="$PATH:../"
cli=respec

# Ensure clean stats
unset RESPEC_HELPER_PATH
unset RESPEC_STATUS_FILE

# Stub some commands
rspec()       { printf "[stubbed] \$ rspec %s" "$*"; }
bundle()      { printf "[stubbed] \$ bundle %s" "$*"; }
filewatcher() { printf "[stubbed] \$ filewatcher %s" "$*"; }
export -f rspec bundle filewatcher

# Tests
context "when there are no special environment requirements"
  describe "root command"
    approve "$cli --help"
    approve "$cli"

  describe "all"
    approve "$cli all"
    approve "$cli all --help"

  describe "focus"
    approve "$cli focus"
    approve "$cli focus --help"
  
  describe "fails"
    approve "$cli fails --help"

  describe "only"
    approve "$cli only --help"
    approve "$cli only"

  describe "except"
    approve "$cli except --help"
    approve "$cli except"

  describe "last"
    approve "$cli last --help"

  describe "continue"
    approve "$cli continue --help"

  describe "reset"
    approve "$cli reset --help"

  describe "watch"
    approve "$cli watch --help"
    approve "$cli watch"


context "when there is no spec_helper"
  describe "fails"
    approve "$cli fails" "error_no_helper"

  describe "continue"
    approve "$cli continue" "error_no_helper"

  describe "reset"
    approve "$cli reset" "error_no_helper"


context "when spec_helper exists but misconfigured"
  export RESPEC_HELPER_PATH="fixtures/misconfigured_spec_helper.rb"
  export RESPEC_STATUS_FILE="fixtures/spec/status.txt"

  describe "fails"
    approve "$cli fails" "error_misconfigured_helper"

  describe "continue"
    approve "$cli continue" "error_misconfigured_helper"

  describe "reset"
    approve "$cli reset" "error_misconfigured_helper"


context "with a properly configured environment"
  export RESPEC_HELPER_PATH="fixtures/spec_helper.rb"
  export RESPEC_STATUS_FILE="fixtures/spec/status.txt"

  describe "fails"
    approve "$cli fails"

  describe "continue"
    approve "$cli continue"

  describe "reset"
    touch "fixtures/spec/status.txt"
    approve "$cli reset"
    if [[ -f "fixtures/spec/status.txt" ]]; then
      fail "expected fixtures/spec/status.txt to be gone"
    fi

  describe "only"
    approve "$cli only con"
    approve "$cli only no-such-files"

  describe "except"
    approve "$cli except con"
    [[ -z $CI ]] && approve "$cli except no-such-file" "respec_except_no_such_file"
    # sort since the output is different in CI
    # this is a repeat of the previous test
    approve "$cli except no-such-file | xargs -n1 | sort | xargs" "respec_except_no_such_file_ci"

context "when there are no specs recently modified"
  describe "last"
    # this touch does not work on vagrant, it is here for CI only
    touch -d "2 hours ago" fixtures/spec/*.rb
    approve "$cli last 1" "respec_last_no_changes"

context "when there are specs recently modified"
  touch "fixtures/spec/modified_spec.rb"
  describe "last"
    approve "$cli last" "respec_last_changes"
  rm -f "fixtures/spec/modified_spec.rb"
