#!/usr/bin/env bash
# This script was generated by bashly 0.8.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
respec_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec - RSpec Convenience Wrapper\n"
    echo

  else
    printf "respec - RSpec Convenience Wrapper\n"
    echo

  fi

  printf "Usage:\n"
  printf "  respec COMMAND\n"
  printf "  respec [COMMAND] --help | -h\n"
  printf "  respec --version | -v\n"
  echo
  # :command.usage_commands
  printf "Commands:\n"
  echo "  all           Run full specs"
  echo "  focus         Run specs tagged with :focus"
  echo "  only          Run specs on files matching a pattern"
  echo "  except        Run specs and exclude files matching a pattern"
  echo "  last          Run specs on files modified in the last N minutes"
  echo "  fails         Run the last failed specs"
  echo "  continue      Continue from where the last run stopped"
  echo "  reset         Delete the status file"
  echo "  watch         Run specs marked with :focus when any *.rb file changes"
  echo "  completions   Echo completions function"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "Environment Variables:\n"

    # :environment_variable.usage
    echo "  RESPEC_STATUS_FILE"
    printf "    Where to store the rspec status file\n"
    printf "    Default: spec/status.txt\n"
    echo

    # :environment_variable.usage
    echo "  RESPEC_HELPER_PATH"
    printf "    The location of the spec_helper.rb file\n"
    printf "    Default: spec/spec_helper.rb\n"
    echo

  fi
}

# :command.usage
respec_all_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec all - Run full specs\n"
    echo

  else
    printf "respec all - Run full specs\n"
    echo

  fi

  printf "Alias: a\n"
  echo

  printf "Usage:\n"
  printf "  respec all\n"
  printf "  respec all --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
respec_focus_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec focus - Run specs tagged with :focus\n"
    echo

  else
    printf "respec focus - Run specs tagged with :focus\n"
    echo

  fi

  printf "Alias: f\n"
  echo

  printf "Usage:\n"
  printf "  respec focus\n"
  printf "  respec focus --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
respec_only_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec only - Run specs on files matching a pattern\n"
    echo

  else
    printf "respec only - Run specs on files matching a pattern\n"
    echo

  fi

  printf "Alias: o\n"
  echo

  printf "Usage:\n"
  printf "  respec only SEARCH\n"
  printf "  respec only --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  SEARCH"
    printf "    Partial filename\n"
    echo

  fi
}

# :command.usage
respec_except_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec except - Run specs and exclude files matching a pattern\n"
    echo

  else
    printf "respec except - Run specs and exclude files matching a pattern\n"
    echo

  fi

  printf "Alias: ex\n"
  echo

  printf "Usage:\n"
  printf "  respec except SEARCH\n"
  printf "  respec except --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  SEARCH"
    printf "    Partial filename\n"
    echo

  fi
}

# :command.usage
respec_last_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec last - Run specs on files modified in the last N minutes\n"
    echo

  else
    printf "respec last - Run specs on files modified in the last N minutes\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "Usage:\n"
  printf "  respec last [MIN]\n"
  printf "  respec last --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "Arguments:\n"

    # :argument.usage
    echo "  MIN"
    printf "    Number of minutes\n"
    printf "    Default: 10\n"
    echo

  fi
}

# :command.usage
respec_fails_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec fails - Run the last failed specs\n"
    echo

  else
    printf "respec fails - Run the last failed specs\n"
    echo

  fi

  printf "Alias: failures\n"
  echo

  printf "Usage:\n"
  printf "  respec fails\n"
  printf "  respec fails --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
respec_continue_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec continue - Continue from where the last run stopped\n"
    echo

  else
    printf "respec continue - Continue from where the last run stopped\n"
    echo

  fi

  printf "Alias: c, cont\n"
  echo

  printf "Usage:\n"
  printf "  respec continue\n"
  printf "  respec continue --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
respec_reset_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec reset - Delete the status file\n"
    echo

  else
    printf "respec reset - Delete the status file\n"
    echo

  fi

  printf "Alias: r\n"
  echo

  printf "Usage:\n"
  printf "  respec reset\n"
  printf "  respec reset --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
respec_watch_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec watch - Run specs marked with :focus when any *.rb file changes\n"
    echo

  else
    printf "respec watch - Run specs marked with :focus when any *.rb file changes\n"
    echo

  fi

  printf "Alias: w\n"
  echo

  printf "Usage:\n"
  printf "  respec watch\n"
  printf "  respec watch --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
respec_completions_usage() {
  if [[ -n $long_usage ]]; then
    printf "respec completions\n"
    echo

    printf "  Echo completions function\n  \n  Intended to be used with: eval \"\$(respec completions)\"\n"
    echo

  else
    printf "respec completions - Echo completions function\n"
    echo

  fi

  printf "Usage:\n"
  printf "  respec completions\n"
  printf "  respec completions --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "Options:\n"

    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# src/lib/banner.sh
banner() {
  magenta "respec: $*"
}

# src/lib/bell.sh
bell() {
  printf '\a'
}

# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# src/lib/fail.sh
fail() {
  red "$*"
  exit 1
}

# src/lib/filters/filter_spec_helper_config.sh
filter_spec_helper_config() {
  regex="example_status_persistence_file_path.*=.*$RESPEC_STATUS_FILE"

  if [[ ! -f "$RESPEC_HELPER_PATH" ]]; then
    echo "Unable to find spec_helper ($RESPEC_HELPER_PATH)"
    return
  fi

  if ! grep -q "$regex" "$RESPEC_HELPER_PATH"; then
    echo "This command requires configuration in these files:"
    echo
    magenta "# $RESPEC_HELPER_PATH"
    echo "RSpec.configure do |config|"
    echo "  config.example_status_persistence_file_path = '$RESPEC_STATUS_FILE'"
    echo "end"
    echo
    magenta "# .gitignore"
    echo "$RESPEC_STATUS_FILE"
    return
  fi
}

# src/lib/reset_status.sh
reset_status() {
  rm -f "$RESPEC_STATUS_FILE"
}

# src/lib/run_rspec.sh
run_rspec() {
  bundle exec rspec "$@" || bell
}

# src/lib/send_completions.sh
send_completions() {
  echo $'# respec completion                                        -*- shell-script -*-'
  echo $''
  echo $'# This bash completions script was generated by'
  echo $'# completely (https://github.com/dannyben/completely)'
  echo $'# Modifying it manually is not recommended'
  echo $''
  echo $'_respec_completions_filter() {'
  echo $'  local words="$1"'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local result=()'
  echo $''
  echo $'  if [[ "${cur:0:1}" == "-" ]]; then'
  echo $'    echo "$words"'
  echo $'  '
  echo $'  else'
  echo $'    for word in $words; do'
  echo $'      [[ "${word:0:1}" != "-" ]] && result+=("$word")'
  echo $'    done'
  echo $''
  echo $'    echo "${result[*]}"'
  echo $''
  echo $'  fi'
  echo $'}'
  echo $''
  echo $'_respec_completions() {'
  echo $'  local cur=${COMP_WORDS[COMP_CWORD]}'
  echo $'  local compwords=("${COMP_WORDS[@]:1:$COMP_CWORD-1}")'
  echo $'  local compline="${compwords[*]}"'
  echo $''
  echo $'  case "$compline" in'
  echo $'    \'completions\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'failures\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'continue\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'except\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'focus\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'fails\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'reset\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'watch\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'only\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'last\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'cont\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'all\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'ex\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'a\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'f\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'o\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'l\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'c\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'r\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    \'w\'*)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help -h")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'    *)'
  echo $'      while read -r; do COMPREPLY+=( "$REPLY" ); done < <( compgen -W "$(_respec_completions_filter "--help --version -h -v a all c completions cont continue ex except f fails failures focus l last o only r reset w watch")" -- "$cur" )'
  echo $'      ;;'
  echo $''
  echo $'  esac'
  echo $'} &&'
  echo $'complete -F _respec_completions respec'
  echo $''
  echo $'# ex: filetype=sh'
}

# src/lib/validations/validate_integer.sh
validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# :command.command_functions
# :command.function
respec_all_command() {
  # src/all_command.sh
  reset_status
  banner "all"
  run_rspec

}

# :command.function
respec_focus_command() {
  # src/focus_command.sh
  banner "focus"
  run_rspec --tag focus

}

# :command.function
respec_only_command() {
  # src/only_command.sh
  search="${args[search]}"
  banner "only *$search*"
  reset_status

  # shellcheck disable=SC2046
  run_rspec $( (find . -name '*_spec.rb' -path "*$search*" | grep .) || echo "-tnothing")

}

# :command.function
respec_except_command() {
  # src/except_command.sh
  search="${args[search]}"
  banner "except *$search*"
  reset_status

  # shellcheck disable=SC2046
  run_rspec $( (find . -name '*_spec.rb' -not -path "*$search*" | grep .) || echo "-tnothing")

}

# :command.function
respec_last_command() {
  # src/last_command.sh
  min="${args[min]}"
  banner "last $min minutes"
  reset_status

  # shellcheck disable=SC2046
  run_rspec $( (find . -name '*_spec.rb' -mmin -"$min" | grep .) || echo "-tnothing")

}

# :command.function
respec_fails_command() {
  # src/fails_command.sh
  banner "failed specs"
  run_rspec --next-failure

}

# :command.function
respec_continue_command() {
  # src/continue_command.sh
  banner "continue"
  run_rspec --tag ~last_run_status:passed

}

# :command.function
respec_reset_command() {
  # src/reset_command.sh
  banner "delete status file"
  if [[ -f "$RESPEC_STATUS_FILE" ]]; then
    reset_status
    echo "deleted $RESPEC_STATUS_FILE"
  else
    echo "file not found: $RESPEC_STATUS_FILE"
  fi

}

# :command.function
respec_watch_command() {
  # src/watch_command.sh
  banner "watch *.rb > respec focus"
  filewatcher '**/*.rb' "clear ; respec focus"

}

# :command.function
respec_completions_command() {
  # src/completions_command.sh
  send_completions
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        respec_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export RESPEC_STATUS_FILE="${RESPEC_STATUS_FILE:-spec/status.txt}"
  export RESPEC_HELPER_PATH="${RESPEC_HELPER_PATH:-spec/spec_helper.rb}"

  # :command.command_filter
  action=${1:-}

  case $action in
    -*)
      ;;

    all | a)
      action="all"
      shift
      respec_all_parse_requirements "$@"
      shift $#
      ;;

    focus | f)
      action="focus"
      shift
      respec_focus_parse_requirements "$@"
      shift $#
      ;;

    only | o)
      action="only"
      shift
      respec_only_parse_requirements "$@"
      shift $#
      ;;

    except | ex)
      action="except"
      shift
      respec_except_parse_requirements "$@"
      shift $#
      ;;

    last | l)
      action="last"
      shift
      respec_last_parse_requirements "$@"
      shift $#
      ;;

    fails | failures)
      action="fails"
      shift
      respec_fails_parse_requirements "$@"
      shift $#
      ;;

    continue | c | cont)
      action="continue"
      shift
      respec_continue_parse_requirements "$@"
      shift $#
      ;;

    reset | r)
      action="reset"
      shift
      respec_reset_parse_requirements "$@"
      shift $#
      ;;

    watch | w)
      action="watch"
      shift
      respec_watch_parse_requirements "$@"
      shift $#
      ;;

    completions)
      action="completions"
      shift
      respec_completions_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      respec_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
respec_all_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        respec_all_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rspec >/dev/null 2>&1; then
    printf "missing dependency: rspec\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install rspec)\n" >&2
    exit 1
  fi

  if ! command -v bundler >/dev/null 2>&1; then
    printf "missing dependency: bundler\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install bundler)\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="all"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
respec_focus_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        respec_focus_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rspec >/dev/null 2>&1; then
    printf "missing dependency: rspec\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install rspec)\n" >&2
    exit 1
  fi

  if ! command -v bundler >/dev/null 2>&1; then
    printf "missing dependency: bundler\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install bundler)\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="focus"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
respec_only_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        respec_only_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rspec >/dev/null 2>&1; then
    printf "missing dependency: rspec\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install rspec)\n" >&2
    exit 1
  fi

  if ! command -v bundler >/dev/null 2>&1; then
    printf "missing dependency: bundler\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install bundler)\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="only"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args[search]+x} ]]; then

          args[search]=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args[search]+x} ]]; then
    printf "missing required argument: SEARCH\nusage: respec only SEARCH\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
respec_except_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        respec_except_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rspec >/dev/null 2>&1; then
    printf "missing dependency: rspec\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install rspec)\n" >&2
    exit 1
  fi

  if ! command -v bundler >/dev/null 2>&1; then
    printf "missing dependency: bundler\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install bundler)\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="except"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args[search]+x} ]]; then

          args[search]=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args[search]+x} ]]; then
    printf "missing required argument: SEARCH\nusage: respec except SEARCH\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
respec_last_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        respec_last_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rspec >/dev/null 2>&1; then
    printf "missing dependency: rspec\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install rspec)\n" >&2
    exit 1
  fi

  if ! command -v bundler >/dev/null 2>&1; then
    printf "missing dependency: bundler\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install bundler)\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="last"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args[min]+x} ]]; then
          # :argument.validations
          if [[ -n $(validate_integer "$1") ]]; then
            printf "validation error in %s:\n%s\n" "MIN" "$(validate_integer "$1")" >&2
            exit 1
          fi

          args[min]=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args[min]:-} ]] || args[min]="10"

}

# :command.parse_requirements
respec_fails_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        respec_fails_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rspec >/dev/null 2>&1; then
    printf "missing dependency: rspec\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install rspec)\n" >&2
    exit 1
  fi

  if ! command -v bundler >/dev/null 2>&1; then
    printf "missing dependency: bundler\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install bundler)\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="fails"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_spec_helper_config)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
respec_continue_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        respec_continue_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rspec >/dev/null 2>&1; then
    printf "missing dependency: rspec\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install rspec)\n" >&2
    exit 1
  fi

  if ! command -v bundler >/dev/null 2>&1; then
    printf "missing dependency: bundler\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install bundler)\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="continue"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_spec_helper_config)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
respec_reset_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        respec_reset_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="reset"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.user_filter
  filter_error=$(filter_spec_helper_config)
  if [[ -n $filter_error ]]; then
    echo "$filter_error" >&2
    exit 1
  fi

}

# :command.parse_requirements
respec_watch_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        respec_watch_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter
  if ! command -v rspec >/dev/null 2>&1; then
    printf "missing dependency: rspec\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install rspec)\n" >&2
    exit 1
  fi

  if ! command -v bundler >/dev/null 2>&1; then
    printf "missing dependency: bundler\n" >&2
    # shellcheck disable=SC2059
    printf "Install using $(magenta gem install bundler)\n" >&2
    exit 1
  fi

  if ! command -v filewatcher >/dev/null 2>&1; then
    printf "missing dependency: filewatcher\n" >&2
    # shellcheck disable=SC2059
    printf "Install with $(magenta gem install filewatcher-cli)\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="watch"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
respec_completions_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        respec_completions_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="completions"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export RESPEC_STATUS_FILE="${RESPEC_STATUS_FILE:-spec/status.txt}"
  export RESPEC_HELPER_PATH="${RESPEC_HELPER_PATH:-spec/spec_helper.rb}"

  # src/initialize.sh

}

# :command.run
run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "all")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        respec_all_usage
      else
        respec_all_command
      fi
      ;;

    "focus")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        respec_focus_usage
      else
        respec_focus_command
      fi
      ;;

    "only")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        respec_only_usage
      else
        respec_only_command
      fi
      ;;

    "except")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        respec_except_usage
      else
        respec_except_command
      fi
      ;;

    "last")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        respec_last_usage
      else
        respec_last_command
      fi
      ;;

    "fails")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        respec_fails_usage
      else
        respec_fails_command
      fi
      ;;

    "continue")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        respec_continue_usage
      else
        respec_continue_command
      fi
      ;;

    "reset")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        respec_reset_usage
      else
        respec_reset_command
      fi
      ;;

    "watch")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        respec_watch_usage
      else
        respec_watch_command
      fi
      ;;

    "completions")
      if [[ ${args[--help]:-} ]]; then
        long_usage=yes
        respec_completions_usage
      else
        respec_completions_command
      fi
      ;;

    "root")
      root_command
      ;;

  esac
}

initialize
run "$@"
